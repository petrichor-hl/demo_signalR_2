@page "/go_shopping"
@using demo_signalR_2.Components;
@using demo_signalR_2.Data;
@using demo_signalR_2.Shared.func
@inject FormatCurrency formatCurrency

<PageTitle>BlazorServer</PageTitle>

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(227px, 1fr));
        gap: 12px;
    }

    .grid-item {
        aspect-ratio: 227/350;
        background-color: white;
        border: 1px solid #013366;
        border-radius: 8px;
        transition: transform 0.2s;
    }

    .grid-item:hover {
        transform: scale(1.15);
        transition: transform 0.4s 0.1s;
    }

    .discount-label {
        color: #E30019;
        border: 1px solid #E30019;
        background-color: #E3001922;
        padding: 0px 6px;
        border-radius: 4px;
        font-weight: 500;
        height: 21px;
    }

</style>

<div class="grid-container ma-8">
    @for (int i = 0; i <= 7; i++)
    {
        var currentIndex = i;
        <div class="grid-item px-4 pb-4 d-flex flex-column">
            <img src="Assets/Images/macbook/@(DummyData.macbooks[i].Id).webp" style="margin-bottom: 14px" />
            <span class="max-line-2 mb-1" style="font-weight: bold; color: black">
                @DummyData.macbooks[i].Name
            </span>

            <span style="color: #6D6E72; font-size: 14px; text-decoration: line-through; height: 16px">
                @formatCurrency.FormattedPriceOf(@DummyData.macbooks[i].Price)
            </span>

            <div class="d-flex gap-4 mb-2">
                <span style="color: #E30019; font-size: 18px; font-weight: bold;">
                    @formatCurrency.FormattedPriceOf(formatCurrency.CalcDiscountPrice(@DummyData.macbooks[i].Price, @DummyData.macbooks[i].Discount))
                </span>

                <div class="discount-label">
                    - @DummyData.macbooks[i].Discount%
                </div>
            </div>

            <div class="d-flex justify-center align-center" style="flex-grow: 1; width: 100%">
                <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="() => OpenDialog(DummyData.macbooks[currentIndex].Name!, DummyData.macbooks[currentIndex].Quantity - DummyData.macbooks[currentIndex].Sold)" Style="background-color: #013366; color: white">
                    Mua
                </MudButton>
            </div>

        </div>
    }

    @for (int i = 0; i <= 4; i++)
    {
        <div class="grid-item px-4 pt-6 pb-4 d-flex flex-column">
            <img src="Assets/Images/pc/@(DummyData.pcs[i].Id).webp" style="margin-bottom: 14px" />
            <span class="mb-2" style="font-weight: bold; font-size: 16px">
                @DummyData.pcs[i].Name
            </span>

            <span style="color: #6D6E72; font-size: 14px; text-decoration: line-through">
                @formatCurrency.FormattedPriceOf(@DummyData.pcs[i].Price)
            </span>

            <div class="d-flex gap-4 mb-2">
                <span style="color: #E30019; font-size: 18px; font-weight: bold;">
                    @formatCurrency.FormattedPriceOf(formatCurrency.CalcDiscountPrice(@DummyData.pcs[i].Price, @DummyData.pcs[i].Discount))
                </span>

                <div class="discount-label">
                    - @DummyData.pcs[i].Discount%
                </div>
            </div>

            <div class="d-flex justify-center align-center" style="flex-grow: 1; width: 100%">
                <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="() => OpenDialog(DummyData.pcs[i].Name!, 10)" Style="background-color: #013366; color: white">
                    Mua
                </MudButton>
            </div>


        </div>
    }


</div>

@inject IDialogService DialogService
@code {

    private async Task OpenDialog(string productName, int remaining)
    {
        DialogOptions options = new DialogOptions {
            FullWidth = true,
            MaxWidth = MaxWidth.ExtraSmall,
            CloseOnEscapeKey = true,
        };

        DialogParameters keyValues = new DialogParameters();
        keyValues.Add("remaining", remaining);

        var dialogResult = DialogService.Show<SimpleDialog>(productName, keyValues, options);
        var result = await dialogResult.Result;

        if (!result.Cancelled)
        {
            string customerName = (result.Data as Dictionary<string, string>)!["CustomerName"];
            string quantity = (result.Data as Dictionary<string, string>)!["QuantityProduct"];
            // Console.WriteLine(customerName);
            // Console.WriteLine(quantity);


        }
    }

}
