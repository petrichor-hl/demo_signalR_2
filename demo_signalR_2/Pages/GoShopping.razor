@page "/go_shopping"
@using demo_signalR_2.Components;
@using demo_signalR_2.Data;
@using demo_signalR_2.Shared.func
@using demo_signalR_2.Services
@inject FormatCurrency formatCurrency

<PageTitle>BlazorServer</PageTitle>
<link rel="stylesheet" type="text/css" href="css/go_shopping.css" />

<div class="grid-container ma-8">
    @for (int i = 0; i <= 7; i++)
    {
        var currentIndex = i;
        <div class="grid-item px-4 pb-4 d-flex flex-column">
            <img src="Assets/Images/macbook/@(DummyData.macbooks[i].Id).webp" style="margin-bottom: 14px" />
            <span class="max-line-2 mb-1" style="font-weight: bold; color: black">
                @DummyData.macbooks[i].Name
            </span>

            <span style="color: #6D6E72; font-size: 14px; text-decoration: line-through; height: 16px">
                @formatCurrency.FormattedPriceOf(@DummyData.macbooks[i].Price)
            </span>

            <div class="d-flex gap-4 mb-2">
                <span style="color: #E30019; font-size: 18px; font-weight: bold;">
                    @formatCurrency.FormattedPriceOf(formatCurrency.CalcDiscountPrice(@DummyData.macbooks[i].Price, @DummyData.macbooks[i].Discount))
                </span>

                <div class="discount-label">
                    - @DummyData.macbooks[i].Discount%
                </div>
            </div>

            <div class="d-flex justify-center align-center" style="flex-grow: 1; width: 100%">
                <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="() => OpenDialog(currentIndex, DummyData.macbooks[currentIndex].Quantity - DummyData.macbooks[currentIndex].Sold)" Style="background-color: #013366; color: white">
                    Mua
                </MudButton>
            </div>

        </div>
    }

    @for (int i = 0; i <= 4; i++)
    {
        <div class="grid-item px-4 pt-6 pb-4 d-flex flex-column">
            <img src="Assets/Images/pc/@(DummyData.pcs[i].Id).webp" style="margin-bottom: 14px" />
            <span class="mb-2" style="font-weight: bold; font-size: 16px">
                @DummyData.pcs[i].Name
            </span>

            <span style="color: #6D6E72; font-size: 14px; text-decoration: line-through">
                @formatCurrency.FormattedPriceOf(@DummyData.pcs[i].Price)
            </span>

            <div class="d-flex gap-4 mb-2">
                <span style="color: #E30019; font-size: 18px; font-weight: bold;">
                    @formatCurrency.FormattedPriceOf(formatCurrency.CalcDiscountPrice(@DummyData.pcs[i].Price, @DummyData.pcs[i].Discount))
                </span>

                <div class="discount-label">
                    - @DummyData.pcs[i].Discount%
                </div>
            </div>

            <div class="d-flex justify-center align-center" style="flex-grow: 1; width: 100%">
                <MudButton Variant="Variant.Filled" FullWidth="true" OnClick="() => OpenDialog(-1, 10)" 
                    Style="background-color: #013366; color: white">
                    Mua
                </MudButton>
            </div>


        </div>
    }


</div>

@inject SaleService SaleService;
@inject IDialogService DialogService

@code {

    private async Task OpenDialog(int productIndex, int remaining)
    {
        // -1 là PC nên bỏ qua
        if (productIndex != -1)
        {
            DialogOptions options = new DialogOptions
            {
                FullWidth = true,
                MaxWidth = MaxWidth.ExtraSmall,
                CloseOnEscapeKey = true,
            };

            DialogParameters keyValues = new DialogParameters();
            keyValues.Add("remaining", remaining);

            string productName = DummyData.macbooks[productIndex].Name!;

            var dialogResult = DialogService.Show<SimpleDialog>(productName, keyValues, options);
            var result = await dialogResult.Result;

            if (!result.Cancelled)
            {
                string customerName = (result.Data as Dictionary<string, string>)!["CustomerName"];
                string quantityString = (result.Data as Dictionary<string, string>)!["QuantityProduct"];

                // Console.WriteLine(customerName);
                // Console.WriteLine(quantity);

                int quantityInt = int.Parse(quantityString);

                DummyData.macbooks[productIndex].Sold += quantityInt;
                SaleService.NotifyHub(customerName, productName, quantityInt);
            }
        }

    }

}
