@page "/"

@using System.Globalization;
@using Microsoft.AspNetCore.SignalR.Client;
@using demo_signalR_2.Components
@using demo_signalR_2.Data
@using demo_signalR_2.Shared.func
@using demo_signalR_2.Services
@inject FormatCurrency formatCurrency


<PageTitle>BlazorServer</PageTitle>
<link rel="stylesheet" type="text/css" href="css/index.css" />

<div class="d-flex flex-column gap-4 ma-4">
    <div class="d-flex flex-column rounded py-6 px-6 gap-2 " 
         style="background-color: #013366">

        <div class="d-flex align-center gap-2" style="color: #FFEE12;">
            <ClockCountDown RemainingSeconds="17423"/>
            <MudIcon Icon="@Icons.Material.Filled.Bolt" Size="Size.Large" Style="animation: zoom 1s infinite ease-in-out" />
            <MudText Style="font-style: italic; font-size: 28px; font-weight: bold">GIỜ VÀNG DEAL SỐC</MudText>
        </div>

        <div class="grid-container">
            @for (int i = 0; i <= 7; i++)
            {
                <div class="grid-item px-4 d-flex flex-column">
                    <img src="Assets/Images/macbook/@(DummyData.macbooks[i].Id).webp" style="margin-bottom: 14px" />
                    <span class="max-line-2 mb-1" style="font-weight: bold; color: black">
                        @DummyData.macbooks[i].Name
                    </span>

                    <span style="color: #6D6E72; font-size: 14px; text-decoration: line-through; height: 16px">
                        @formatCurrency.FormattedPriceOf(@DummyData.macbooks[i].Price)
                    </span>

                    <div class="d-flex gap-4 mb-2">
                        <span style="color: #E30019; font-size: 18px; font-weight: bold;">
                            @formatCurrency.FormattedPriceOf(formatCurrency.CalcDiscountPrice(@DummyData.macbooks[i].Price, @DummyData.macbooks[i].Discount))
                        </span>

                        <div class="discount-label">
                            - @DummyData.macbooks[i].Discount%
                        </div>
                    </div>

                    <ProgressBar Current="@DummyData.macbooks[i].Sold" Total="@DummyData.macbooks[i].Quantity"/>

                </div>
            }
        </div>

    </div>

    <div class="d-flex flex-column rounded py-6 px-6 gap-2 "
         style="background-color: #013366">

        <div class="d-flex align-center gap-2" style="color: #013366">

            <ClockCountDown RemainingSeconds="30514" />
            <MudIcon Icon="@Icons.Material.Filled.Bolt" Size="Size.Large" Style="animation: zoom 1s infinite ease-in-out" />
            <MudText Style="font-style: italic; font-size: 28px; font-weight: bold">GAMING STATION RTX4000 SERIES</MudText>

        </div>

        <div class="d-flex gap-4">
            <MudImage Src="Assets/Images/pc/pc-backdrop.webp" Style="border-radius: 8px; height: 288px"/>
            <div class="horizontal-list" style="overflow-x: scroll">
                @for (int i = 0; i <= 4; i++)
                {
                    <div class="item px-4 pt-6 d-flex flex-column" >
                        <img src="Assets/Images/pc/@(DummyData.pcs[i].Id).webp" style="margin-bottom: 14px" />
                        <span class="mb-2" style="font-weight: bold; font-size: 16px">
                            @DummyData.pcs[i].Name
                        </span>

                        <span style="color: #6D6E72; font-size: 14px; text-decoration: line-through">
                            @formatCurrency.FormattedPriceOf(@DummyData.pcs[i].Price)
                        </span>

                        <div class="d-flex gap-4">
                            <span style="color: #E30019; font-size: 18px; font-weight: bold;">
                                @formatCurrency.FormattedPriceOf(formatCurrency.CalcDiscountPrice(@DummyData.pcs[i].Price, @DummyData.pcs[i].Discount))
                            </span>

                            <div class="discount-label">
                                - @DummyData.pcs[i].Discount%
                            </div>
                        </div>

                    </div>
                }
            </div>
        </div>

    </div>

</div>

@inject SaleService SaleService;
@inject NavigationManager Navigation;
@inject ISnackbar Snackbar

@implements IDisposable

@code {

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/saleHub"))
            .Build();

        hubConnection.On<string, string, int>("RefreshSaleProducts", (customerName, productName, quantity) =>
        {
            InvokeAsync(() =>
            {
                StateHasChanged();
                Snackbar.Add(
                    $"{customerName} đã mua {quantity} {productName}", Severity.Success
                );
            });

        });

        await hubConnection.StartAsync();
    }

    public void Dispose()
    {
        DisposeHubConnection();
    }

    // Phương thức để ngắt kết nối Hub Connection
    private void DisposeHubConnection()
    {
        if (hubConnection != null)
        {
            hubConnection.DisposeAsync();
            hubConnection = null;
        }
    }
}